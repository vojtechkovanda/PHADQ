%% demo3_IFandIPC: Demonstrating how to calculate IF and iPC
%   
%   This demo illustrates how to calculate the instantaneous-phase-corrected
%   (iPC) spectrogram [1] from the instantaneous frequency (IF). Derivative
%   of window is used for calculation of IF, where analytical and numerical
%   differentiation are respectively available in "generalizedCosWin.m" and
%   "numericalDiffWin.m". See [1] for further information.
%   
%   Figure 1: Generated window and its derivative.
%      This figure shows the window function and its derivative generated by
%      "generalizedCosWin.m". These two windows are used for calculating IF.
%   
%   Figure 2: Comparison of analytic and numerical derivatives.
%      Both analytic and numerical derivatives of the window function are
%      depicted in this figure together with their difference (error).
%   
%   Figure 3: Calculated spectrograms.
%      This figure shows amplitude and real part of the spectrograms obtained
%      by DGT and the instantaneous phase correction. Real parts are shown
%      for better visibility comparing to complex argument (angle).
%   
%   [1] Kohei Yatabe, Yoshiki Masuyama, Tsubasa Kusano and Yasuhiro Oikawa,
%       "Representation of complex spectrogram via phase conversion,"
%       Acoustical Science and Technology, vol.40, no.3, May 2019. (Open Access)


%% Check MATLAB version and load signal

if verLessThan('matlab','9.1')
    error 'MATLAB 2016b or later is required due to repeated use of "implicit expansion"'
end
eval('load mtlb, signal = mtlb; clear mtlb') % loading speech signal


%% Set parameters of DGT (see "help DGT")

windowLen = 2^8;         % window length
shiftLen  = windowLen/8; % shifting stepsize
fftLen    = windowLen*4; % number of FFT points

rotateFlag    = true; % deciding phase convention of DGT
zeroPhaseFlag = true; % deciding phase convention of window


%% Generate window and its derivative (see "help generalizedCosWin")

[win,diffWin] = generalizedCosWin(windowLen,'nuttall4termC1');

figure, plot([win, diffWin])
legend('original window', 'first derivative')
codeOceanFigSave(gcf,'../../results','demo3_figure1.pdf') % save in Code Ocean


%% Compare analytic derivative with its numerical approximation

approxDiffWin = numericalDiffWin(win);

figure, plot([diffWin, approxDiffWin, diffWin-approxDiffWin])
legend('analytic derivative','numerical derivative','approximation error')
codeOceanFigSave(gcf,'../../results','demo3_figure2.pdf') % save in Code Ocean


%% Calculate DGT and its time-derivative (see [1] above)

signal = zeroPaddingForDGT(signal,shiftLen,fftLen); % must run this before DGT

spec = DGT(signal,win,shiftLen,fftLen,rotateFlag,zeroPhaseFlag);
diffSpec = DGT(signal,diffWin,shiftLen,fftLen,rotateFlag,zeroPhaseFlag);


%% Calculate bin-wise instantaneous frequency (see [1] above)

IF = calcInstFreq(spec,diffSpec,fftLen,windowLen,rotateFlag);


%% Calculate instantaneous-phase-corrected (iPC) spectrogram (see [1] above)

iPCspec = instPhaseCorrection(spec,IF,shiftLen,fftLen);


%% Display calculated spectrograms

figure, cRange = max(abs(spec(:)))/5;
subplot(1,3,1), imagesc(abs(spec)), axis xy, caxis(cRange*[-1 1])
title 'Amplitude'
subplot(1,3,2), imagesc(real(spec)), axis xy, caxis(cRange*[-1 1])
title 'Real part'
subplot(1,3,3), imagesc(real(iPCspec)), axis xy, caxis(cRange*[-1 1])
title 'Real part (iPC)'
codeOceanFigSave(gcf,'../../results','demo3_figure3.pdf') % save in Code Ocean


%% Reconstruct signal and evaluate reconstruction error

spec = invInstPhaseCorrection(iPCspec,IF,shiftLen,fftLen); % inverting iPC

dualWin = calcCanonicalDualWindow(win,shiftLen);
reconst = invDGT(spec,dualWin,shiftLen,fftLen,rotateFlag,zeroPhaseFlag);

maxError = max(abs(signal-reconst))/max(abs(signal));
disp(['relative maximum reconstruction error: ' num2str(maxError)])